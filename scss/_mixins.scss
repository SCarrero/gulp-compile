@use 'sass:color';
/// Adds styles for an orbit slide caption.
@mixin orbit-caption-custom(
  $edge: bottom,
  $background: $orbit-caption-background,
  $padding: $orbit-caption-padding
) {
  position: absolute;
  @if($edge == bottom) {
    top: auto;
    bottom: 0;
  }
  @if($edge == top) {
    bottom: auto;
    top: 0;
  }
  width: 100%;
  margin: 0;
  padding: $padding;
  background-color: $background;
  color: color-pick-contrast($background);
}

@mixin nav-submenu-parent-hover(){
}

// link style for primary and secondary nav but not ribbon
@mixin nav-desktop-link($color: $medium-gray, $activecolor: map-get($colors, green3)){
  color: $color;
  transition: color 0.2s ease 0s, border-bottom-color 0.2s ease 0s;
  &.active {
    color: $activecolor;
    border-bottom-color: $activecolor;
  }
  &:focus,
  &:hover {
    color: $activecolor;
    border-bottom-color: $activecolor;
  }
}

@mixin chevron-h2($left: map-get($colors, green4), $right: map-get($colors, green5)){
  transition: background-size 350ms ease-in, background-position 350ms ease-in;
  background-color: $right;
  background-size: 105% 50%, 105% 50%;
  background-position: 0 0, 0 100%;
  background-repeat: no-repeat;
  background-image: repeating-linear-gradient(57deg, $left 0%, $left 85%, $right 85%, $right 100%),
    repeating-linear-gradient(-57deg, $right 0%, $right 15%, $left 15%, $left 100%),none;
  &.animate-once {
    @include breakpoint(large){
      background-size: 75% 50%, 75% 50%;
      background-position: -40% 0, -40% 100%;
    }
  }
}

@mixin chevron-h2-50($left: map-get($colors, green4), $right: map-get($colors, green5)){
  transition: background-size 350ms ease-in;
  background-color: $right;
  background-size: 105% 50%, 105% 50%;
  background-position: 0 0, 0 100%;
  background-repeat: no-repeat;
  background-image: repeating-linear-gradient(57deg, $left 0%, $left 50%, $right 50%, $right 100%),
    repeating-linear-gradient(-57deg, $right 0%, $right 50%, $left 50%, $left 100%),none;
  &.animate-once {
    @include breakpoint(large){
      background-size: 40% 50%, 40% 50%;
    }
  }
}

@mixin chevron-l-r($left: map-get($colors, green1), $right: map-get($colors, green3)){
  transition: background-size 350ms ease-in, background-position 350ms ease-in;
  background-color: $right;
  background-size: 105% 50%, 105% 50%;
  background-position: 0 0, 0 100%;
  background-repeat: no-repeat;
  background-image: repeating-linear-gradient(57deg, $left 0%, $left 75%, $right 75%, $right 100%),
    repeating-linear-gradient(-57deg, $right 0%, $right 25%, $left 25%, $left 100%),none;
  &.animate-once {
    @include breakpoint(large){
      background-size: 75% 50%, 75% 50%;
      background-position: -40% 0, -40% 100%;
    }
  }
}

@mixin chevron-v4($shade: map-get($colors, blue5), $darker-on-bottom: false){
  background-color: $shade;
  background-size: 50% 100%, 50% 100%;
  background-position: 0 0, 100% 0;
  background-repeat: no-repeat;
  @if($darker-on-bottom == true){
    background-image: repeating-linear-gradient(147deg,
    $shade 0%,
    $shade 40%,
    color.scale($shade, $lightness: -2%) 40%,
    color.scale($shade, $lightness: -2%) 60%,
    color.scale($shade, $lightness: -5%) 60%,
    color.scale($shade, $lightness: -5%) 80%,
    color.scale($shade, $lightness: -8%) 80%,
    color.scale($shade, $lightness: -8%) 100%),
    repeating-linear-gradient(-147deg,
    $shade 0%,
    $shade 40%,
    color.scale($shade, $lightness: -2%) 40%,
    color.scale($shade, $lightness: -2%) 60%,
    color.scale($shade, $lightness: -5%) 60%,
    color.scale($shade, $lightness: -5%) 80%,
    color.scale($shade, $lightness: -8%) 80%,
    color.scale($shade, $lightness: -8%) 100%),
    none;
  }
  @if($darker-on-bottom == false){
    background-image: repeating-linear-gradient(147deg,
    $shade 0%,
    $shade 40%,
    color.scale($shade, $lightness: 2%) 40%,
    color.scale($shade, $lightness: 2%) 60%,
    color.scale($shade, $lightness: 5%) 60%,
    color.scale($shade, $lightness: 5%) 80%,
    color.scale($shade, $lightness: 8%) 80%,
    color.scale($shade, $lightness: 8%) 100%),
    repeating-linear-gradient(-147deg,
    $shade 0%,
    $shade 40%,
    color.scale($shade, $lightness: 2%) 40%,
    color.scale($shade, $lightness: 2%) 60%,
    color.scale($shade, $lightness: 5%) 60%,
    color.scale($shade, $lightness: 5%) 80%,
    color.scale($shade, $lightness: 8%) 80%,
    color.scale($shade, $lightness: 8%) 100%),
    none;
  }
  &.tall-content-band,
  &.large-content-band {
    @media screen and (min-width: -zf-bp-to-em(map-get($breakpoints, medium) + 160px)) {
      background-size: 66vw 100%, 66vw 100%;
      background-position: 0 0, 66vw 0;
    }
    @include breakpoint(large) {
      background-size: 75vw 100%, 75vw 100%;
      background-position: 0 0, 75vw 0;
    }
  }
}

@mixin chevron-vmulti($shade: map-get($colors, green3)){
  position: relative;
  background-color: $shade;
  background-size: 40vw 100%, 75vw 100%, 75vw 100%;
  background-position: 0 0, 0 0, 75vw 0;
  background-repeat: no-repeat;
  background-image:
  linear-gradient(to right, $shade 50%, transparent 50%),
  repeating-linear-gradient(147deg,
  $shade 0%,
  $shade 20%,
  color.scale(color.scale($shade, $saturation:4%), $lightness: 2%) 20%,
  color.scale(color.scale($shade, $saturation:4%), $lightness: 2%) 40%,
  color.scale(color.scale($shade, $saturation:8%), $lightness: 6%) 40%,
  color.scale(color.scale($shade, $saturation:8%), $lightness: 6%) 60%,
  color.scale(color.scale($shade, $saturation:2%), $lightness: 1%) 60%,
  color.scale(color.scale($shade, $saturation:2%), $lightness: 1%) 100%),
  repeating-linear-gradient(-147deg,
  $shade 0%,
  $shade 20%,
  color.scale(color.scale($shade, $saturation:-3%), $lightness: -4%) 20%,
  color.scale(color.scale($shade, $saturation:-3%), $lightness: -4%) 40%,
  $shade 40%,
  $shade 60%,
  color.scale(color.scale($shade, $saturation:-3%), $lightness: -4%) 60%,
  color.scale(color.scale($shade, $saturation:-3%), $lightness: -4%) 100%),
  none;
  &.tall-content-band {
    @include breakpoint(large) {
      background-size: 90vw 100%, 75vw 100%, 75vw 100%;
      background-position: 0 0, 0 0, 75vw 0;
      background-image:
        linear-gradient(to right, $shade 50%, transparent 50%),
        repeating-linear-gradient(147deg,
        $shade 0%,
        $shade 50%,
        color.scale(color.scale($shade, $saturation:4%), $lightness: 2%) 50%,
        color.scale(color.scale($shade, $saturation:4%), $lightness: 2%) 67%,
        color.scale(color.scale($shade, $saturation:8%), $lightness: 6%) 67%,
        color.scale(color.scale($shade, $saturation:8%), $lightness: 6%) 85%,
        color.scale(color.scale($shade, $saturation:2%), $lightness: 1%) 85%,
        color.scale(color.scale($shade, $saturation:2%), $lightness: 1%) 100%),
        repeating-linear-gradient(-147deg,
        $shade 0%,
        $shade 50%,
        color.scale(color.scale($shade, $saturation:-3%), $lightness: 4%) 50%,
        color.scale(color.scale($shade, $saturation:-3%), $lightness: 4%) 67%,
        $shade 67%,
        $shade 85%,
        color.scale(color.scale($shade, $saturation:-3%), $lightness: 4%) 85%,
        color.scale(color.scale($shade, $saturation:-3%), $lightness: 4%) 100%), 
        none;
    }
    @include breakpoint(xxlarge) {
      background-size: 90vw 100%, 78vw 100%, 78vw 100%;
      background-position: 0 0, 0 0, 78vw 0;
    }
  }
}
@mixin title-background($shade){
  & {
    background: $shade;
    background-size: 120% 100%, 120% 100%;
    background-position: 0 0, 120% 0;
    background-repeat: no-repeat;
    background-image: repeating-linear-gradient(147deg,
    $shade 0%,
    $shade 70%,
    color.scale($shade, $lightness: 2%) 70%,
    color.scale($shade, $lightness: 2%) 85%,
    color.scale($shade, $lightness: 5%) 85%,
    color.scale($shade, $lightness: 5%) 100%),
    repeating-linear-gradient(-147deg,
    $shade 0%,
    $shade 70%,
    color.scale($shade, $lightness: 2%) 70%,
    color.scale($shade, $lightness: 2%) 85%,
    color.scale($shade, $lightness: 5%) 85%,
    color.scale($shade, $lightness: 5%) 100%),
    none;
  }
  @include breakpoint(large) {
    background-size: 105% 100%, 105% 100%;
    background-position: 0 0, 105% 0;
  }
  @include breakpoint(xlarge) {
    background-size: 61em 100%, 61em 100%;
    background-position: 0 0, 61em 0;
  }
  @include breakpoint(xxlarge) {
    background-size: 70em 100%, 70em 100%;
    background-position: 0 0, 70em 0;
  }
}
@mixin list-divided(
  $color: color.scale($light-gray, $lightness: -5%),
  $padding-base: $global-padding, 
  $last-border: false
){
  > li {
    margin: 0;
    padding-bottom: rem-calc($padding-base);
    border-bottom: 1px solid $color;
    + li {
      padding-top: rem-calc($padding-base);
    }
    > :last-child {
      margin-bottom: 0;
    }
    @if ($last-border == false) {
      &:last-child {
        padding-bottom: 0 !important;
        border-bottom-width: 0 !important;
      }
    }
  }
  .crt-articles-list-view & {
    > li:first-child {
      border-top: 1px solid $color;
      padding-top: rem-calc($padding-base);
    }
  }
}

// @mixin constrained-row(){
//   max-width: rem-calc(1200);
//   padding-right: 1.25rem;
//   padding-left: 1.25rem;
//   @include breakpoint(rem-calc(1240)) {
//     margin-left: auto;
//     margin-right: auto;
//     padding-right: 0rem;
//     padding-left: 0rem;
//   }
// }

@mixin mvp-row(){
  margin: 0;
  padding-left: rem-calc(30);
  padding-right: rem-calc(30);
  > .column {
    padding-left: 0;
    padding-right: 0;
  }
  @include breakpoint(large){
    padding-right: rem-calc(map-get($grid-container-padding, large)/2);
    padding-left: rem-calc(map-get($grid-container-padding, large)/2);
  }
  @include breakpoint(xlarge) {
    max-width: $grid-container;
    margin: 0 auto;
    padding-right: rem-calc(map-get($grid-container-padding, xlarge)/2);
    padding-left: rem-calc(map-get($grid-container-padding, xlarge)/2);
  }
  @include breakpoint(xxlarge){
    padding-right: rem-calc(map-get($grid-container-padding, xxlarge)/2);
    padding-left: rem-calc(map-get($grid-container-padding, xxlarge)/2);
  }
}
// mixin to add rss feed icon to links in a list
@mixin rss-list($color: $white) {
  position: relative;
  margin-bottom: 1rem;
  &::before {
    content: " ";
    display: inline-block;
    width: 1em;
    height: 1em;
    margin-right: 0.375em;
    position: relative;
    bottom: -0.1em;
    background: transparent icon(rss, $color, 1rem, 1rem, 0, 0, 500, 460) no-repeat center center;
  }
}


// calculate color differences from beginning and ending color across number of steps, and return color at particular step
// just pass a start color/end color, number of steps from one to the other, and the current step to get the color.
@function color-shift($a, $b, $steps, $step) {
  @if $step == 1 or $steps < 2 {
    @return $a;
  }
  @else if $step >= $steps {
    @return $b;
  }
  @else {
    $shift: $step / $steps;
    $sat: saturation($a) - saturation($b);
    $lig: lightness($a) -  lightness($b);
    $hue: hue($a) - hue($b);
    @if $hue > 180 {
      $hue: $hue - 360;
    }
    @else if $hue <= -180 {
      $hue: $hue + 360;
    }
    $hue2: adjust-hue($a, -$hue * $shift);
    $sat2: if($sat > 0,  color.scale($hue2, $saturation: -abs($sat) * $shift), color.scale($hue2, $saturation: abs($sat) * $shift));
    $lig2:  if($lig > 0, color.scale($sat2, $lightness: -abs($lig) * $shift), color.scale($sat2, $lightness: abs($lig) * $shift));
    @return $lig2;
  }
}

//  calc new aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
}

// em-calc()
// easier to remember than the zf-name.
@function em-calc($value) {
  $new: -zf-bp-to-em($value);
  @return $new;
}
@mixin fluid-type(
    $min-font-size: 16px,
    $max-font-size: 32px,
    $max-bp: xxlarge,
    $fontsize: calc(#{$min-font-size} + #{strip-unit($max-font-size) - strip-unit($min-font-size)} * 
      ((100vw - #{$global-width-min}) / #{strip-unit($global-width) - strip-unit($global-width-min)}))
  ) {
  & {
    font-size: $min-font-size;
    font-size: $fontsize;  
    @include breakpoint($max-bp) {
      font-size: rem-calc($max-font-size);
    }
  }  
}

// Moved blue chevrons for expand/collapse items into a Mixin so they are easier to reuse.
@mixin vertical-chevron-icon ($border-width: 0.0625rem, $border-color: rgba($dark-gray, 0.25)) {
  border: $border-width solid $border-color;
  position: relative;
  text-align: left;
  &::before {
    content: "";
    background: transparent icon(chevron-down, $primary-color, 0.875rem, 0.875rem) no-repeat right center/contain;
    transition: background 0.25s ease;
    width: 1rem;
    height: 1rem;
    margin-left: -0.15rem;
    position: absolute;
    top: 50%;
    right: 1rem;
    margin-top: -0.5rem;
  }
  &[aria-expanded="true"] {
    &::before {
      background-image: icon(chevron-up, $primary-color,  0.875rem, 0.875rem);
    }
  }
}
@function invert-color($color1) {
  @if ($color1 == white) {
    @return $black;
  }
  @else {
    @return $white;
  }
}
